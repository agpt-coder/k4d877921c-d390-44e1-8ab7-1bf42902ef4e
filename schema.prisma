// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  email     String    @unique
  password  String
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?

  UserProfile UserProfile?

  // Relationships
  UserFeedbacks       UserFeedback[]
  ContentInteractions ContentInteraction[]
  DeviceInteractions  DeviceInteraction[]
  AuthTokens          AuthToken[]
}

model UserProfile {
  id        String @id @default(dbgenerated("gen_random_uuid()"))
  firstName String
  lastName  String
  language  String
  userId    String

  User User @relation(fields: [userId], references: [id])

  @@unique([userId])
}

model Content {
  id            String      @id @default(dbgenerated("gen_random_uuid()"))
  title         String
  contentBody   String
  contentType   ContentType
  scheduledTime DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isActive      Boolean     @default(true)

  // Relationships
  ContentInteractions ContentInteraction[]
}

model Device {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  identifier  String   @unique
  os          String
  status      Status
  lastCheckIn DateTime
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  DeviceInteractions DeviceInteraction[]
}

model UserFeedback {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  content   String
  createdAt DateTime @default(now())

  User User @relation(fields: [userId], references: [id])
}

model ContentInteraction {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  contentId String
  userId    String?
  action    Action
  createdAt DateTime @default(now())

  Content Content @relation(fields: [contentId], references: [id])
  User    User?   @relation(fields: [userId], references: [id])
}

model DeviceInteraction {
  id          String       @id @default(dbgenerated("gen_random_uuid()"))
  deviceId    String
  action      DeviceAction
  description String?
  createdAt   DateTime     @default(now())

  Device Device  @relation(fields: [deviceId], references: [id])
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model AuthToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime

  User User @relation(fields: [userId], references: [id])
}

enum Role {
  MunicipalAdmin
  Technician
  Citizen
}

enum ContentType {
  Image
  Video
  NewsTicker
}

enum Status {
  Online
  Offline
  Maintenance
}

enum Action {
  View
  Like
  Dislike
}

enum DeviceAction {
  Reboot
  Update
  ConfigurationChange
}

